#!/bin/bash

# A script to do a complete build of all of Lift. Any additional command
# line arguments are passed directly to the underlying "liftsh" command 
# calls.

START_TIME=$(date +%s)
mod="build setup"

function AlertFail() {
    echo =====================================================
    echo Build failed in $mod! Duration = $(( $(date +%s) - $START_TIME )) seconds
    echo =====================================================
}

# Automatically fail the script if any particular command fails
set -e
trap AlertFail ERR

# Locate our base directory (taken from http://blog.eitchnet.ch/?p=242)
SCRIPT_NAME="${0##*/}"
SCRIPT_DIR="${0%/*}"

# if the script was started from the base directory, then the
# expansion returns a period
if test "$SCRIPT_DIR" == "." ; then
  SCRIPT_DIR="$PWD"
# if the script was not called with an absolute path, then we need to add the
# current working directory to the relative path of the script
elif test "${SCRIPT_DIR:0:1}" != "/" ; then
  SCRIPT_DIR="$PWD/$SCRIPT_DIR"
fi

# First, we need to build and deploy the "superbuild" module, since it 
# defines some dependencies and the sbt-lift-plugin. This is separate
# primarily because superbuild has a different directory structure than
# the other modules
echo "Building superbuild"
mod=superbuild
pushd ${SCRIPT_DIR}/../sbt > /dev/null
./liftsh "$@" +clean-lib +update +clean +publish
popd > /dev/null

# Next, for each of the three main modules clean/setup the SBT environment 
# and then do a full build
for mod in framework modules examples
do
    echo "Building $mod"
    pushd ${SCRIPT_DIR}/../../${mod} > /dev/null
    ./liftsh "$@" +clean-lib +update +clean +publish
    popd > /dev/null
done

echo =====================================================
echo Build succeeded! Duration = $(( $(date +%s) - $START_TIME )) seconds
echo =====================================================

